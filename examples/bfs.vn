import containers

alias graph<T> = map<T, list<T>>

fn breadth_first_search<T>(g: graph<T>, start_node: T): list<T> {
  let queue = containers::queue()
  let visited = containers::set()

  queue.push(start_node)
  visited.add(start_node)

  let results_list = []
  while queue.length() > 0 {
    let node = queue.pop()
    results_list.append(node)
    for neighbor in g[node] {
      if neighbor not in visited {
        visited.add(neighbor)
        queue.push(neighbor)
      }
  }
  return results_list
}
