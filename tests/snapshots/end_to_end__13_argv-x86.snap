---
source: tests/end_to_end.rs
expression: x86_output
---
extern venice_string_new
extern venice_print
extern venice_list_length
extern venice_printint
extern venice_list_length
extern venice_string_new
extern venice_print
extern venice_list_index
extern venice_println


section .text

global venice_main
venice_main:

venice_main_0:
  push r12
  push r13
  push r14
  push r15
  push rbx
  push rbp
  mov rbp, rsp
  sub rsp, 16
  mov [rbp-8], rdi
  mov r12, s_0
  mov rdi, r12
  push r10
  push r11
  call venice_string_new
  pop r11
  pop r10
  mov r11, rax
  mov rdi, r11
  push r10
  push r11
  call venice_print
  pop r11
  pop r10
  mov r10, rax
  mov r12, [rbp-8]
  mov rdi, r12
  push r10
  push r11
  call venice_list_length
  pop r11
  pop r10
  mov r11, rax
  mov rdi, r11
  push r10
  push r11
  call venice_printint
  pop r11
  pop r10
  mov r10, rax
  mov r10, 0
  mov [rbp-16], r10
  jmp while_cond_1

while_cond_1:
  mov r10, [rbp-16]
  mov r12, [rbp-8]
  mov rdi, r12
  push r10
  push r11
  call venice_list_length
  pop r11
  pop r10
  mov r11, rax
  cmp r10, r11
  jl while_2
  jmp while_end_3

while_2:
  mov r15, s_1
  mov rdi, r15
  push r10
  push r11
  call venice_string_new
  pop r11
  pop r10
  mov r14, rax
  mov rdi, r14
  push r10
  push r11
  call venice_print
  pop r11
  pop r10
  mov r13, rax
  mov r12, [rbp-8]
  mov rdi, r12
  mov r13, [rbp-16]
  mov rsi, r13
  push r10
  push r11
  call venice_list_index
  pop r11
  pop r10
  mov r11, rax
  mov rdi, r11
  push r10
  push r11
  call venice_println
  pop r11
  pop r10
  mov r10, rax
  mov r11, [rbp-16]
  mov r12, 1
  mov r10, r12
  add r10, r11
  mov [rbp-16], r10
  jmp while_cond_1

while_end_3:
  mov r10, 0
  mov rax, r10
  add rsp, 16
  pop rbp
  pop rbx
  pop r15
  pop r14
  pop r13
  pop r12
  ret

section .data

  s_0 db "# of args: ", 0
  s_1 db "Arg: ", 0

