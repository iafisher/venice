---
source: tests/end_to_end.rs
expression: x86_output
---
.globl venice_main
venice_main:

venice_main_0:
  pushq %rbp
  movq %rsp, %rbp
  subq $8, %rsp
  pushq %r12
  pushq %r13
  pushq %r14
  pushq %r15
  pushq %rbx
  movq $12, %r10
  movq %r10, %rdi
  pushq %r10
  pushq %r11
  call fibonacci__0
  popq %r11
  popq %r10
  movq %rax, %r10
  movq %r10, -8(%rbp)
  movq -8(%rbp), %r10
  movq %r10, %rdi
  pushq %r10
  pushq %r11
  call venice_printint
  popq %r11
  popq %r10
  movq %rax, %r10
  movq $0, %r10
  movq %r10, %rax
  popq %rbx
  popq %r15
  popq %r14
  popq %r13
  popq %r12
  addq $8, %rsp
  popq %rbp
  retq

fibonacci__0:

fibonacci__0_1:
  pushq %rbp
  movq %rsp, %rbp
  subq $40, %rsp
  pushq %r12
  pushq %r13
  pushq %r14
  pushq %r15
  pushq %rbx
  movq %rdi, -8(%rbp)
  movq $1, %r10
  movq %r10, -16(%rbp)
  movq $0, %r10
  movq %r10, -24(%rbp)
  movq $1, %r10
  movq %r10, -32(%rbp)
  jmp while_cond_2

while_cond_2:
  movq -32(%rbp), %r10
  movq %r10, %r11
  movq -8(%rbp), %r10
  cmpq %r10, %r11
  jl while_3
  jmp while_end_4

while_3:
  movq -16(%rbp), %r10
  movq %r10, -40(%rbp)
  movq -16(%rbp), %r10
  movq %r10, %r11
  movq -24(%rbp), %r10
  addq %r10, %r11
  movq %r11, %r11
  movq %r11, -16(%rbp)
  movq -40(%rbp), %r10
  movq %r10, -24(%rbp)
  movq -32(%rbp), %r10
  movq %r10, %r11
  movq $1, %r10
  addq %r10, %r11
  movq %r11, %r11
  movq %r11, -32(%rbp)
  jmp while_cond_2

while_end_4:
  movq -16(%rbp), %r10
  movq %r10, %rax
  popq %rbx
  popq %r15
  popq %r14
  popq %r13
  popq %r12
  addq $40, %rsp
  popq %rbp
  retq


