---
source: tests/end_to_end.rs
expression: x86_output
---
extern venice_printint


section .text

global venice_main
venice_main:

venice_main_0:
  push r12
  push r13
  push r14
  push r15
  push rbx
  push rbp
  mov rbp, rsp
  sub rsp, 8
  mov r11, 12
  mov rdi, r11
  push r10
  push r11
  call fibonacci__0
  pop r11
  pop r10
  mov r10, rax
  mov [rbp-8], r10
  mov r11, [rbp-8]
  mov rdi, r11
  push r10
  push r11
  call venice_printint
  pop r11
  pop r10
  mov r10, rax
  mov r10, 0
  mov rax, r10
  add rsp, 8
  pop rbp
  pop rbx
  pop r15
  pop r14
  pop r13
  pop r12
  ret

fibonacci__0:

fibonacci__0_1:
  push r12
  push r13
  push r14
  push r15
  push rbx
  push rbp
  mov rbp, rsp
  sub rsp, 40
  mov [rbp-8], rdi
  mov r10, 1
  mov [rbp-16], r10
  mov r10, 0
  mov [rbp-24], r10
  mov r10, 1
  mov [rbp-32], r10
  jmp while_cond_2

while_cond_2:
  mov r10, [rbp-32]
  mov r11, [rbp-8]
  cmp r10, r11
  jl while_3
  jmp while_end_4

while_3:
  mov r12, [rbp-16]
  mov [rbp-40], r12
  mov r11, [rbp-16]
  mov r12, [rbp-24]
  mov r10, r12
  add r10, r11
  mov [rbp-16], r10
  mov r10, [rbp-40]
  mov [rbp-24], r10
  mov r11, [rbp-32]
  mov r12, 1
  mov r10, r12
  add r10, r11
  mov [rbp-32], r10
  jmp while_cond_2

while_end_4:
  mov r10, [rbp-16]
  mov rax, r10
  add rsp, 40
  pop rbp
  pop rbx
  pop r15
  pop r14
  pop r13
  pop r12
  ret

section .data


