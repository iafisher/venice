---
source: tests/end_to_end.rs
expression: vil_output
---
extern venice_printint;


func fibonacci__1(n: i64) -> i64 {

fibonacci__1_0:
  %fib_i__2 = alloca 8
  %0 = set 1
  %fib_i__2 = store %0, 0
  %fib_i_minus_1__3 = alloca 8
  %1 = set 0
  %fib_i_minus_1__3 = store %1, 0
  %i__4 = alloca 8
  %2 = set 1
  %i__4 = store %2, 0
  jump %while_cond_1

while_cond_1:
  %4 = load %i__4, 0
  %5 = load %n__0, 0
  cmp %4, %5
  jump_lt %eq_4 %eq_5

eq_4:
  %3 = set 1
  jump %eq_end_6

eq_5:
  %3 = set 0
  jump %eq_end_6

eq_end_6:
  %4 = set 1
  cmp %3, %4
  jump_eq %while_2 %while_end_3

while_2:
  %tmp__5 = alloca 8
  %5 = load %fib_i__2, 0
  %tmp__5 = store %5, 0
  %7 = load %fib_i__2, 0
  %8 = load %fib_i_minus_1__3, 0
  %6 = add %7, %8
  %fib_i__2 = store %6, 0
  %7 = load %tmp__5, 0
  %fib_i_minus_1__3 = store %7, 0
  %9 = load %i__4, 0
  %10 = set 1
  %8 = add %9, %10
  %i__4 = store %8, 0
  jump %while_cond_1

while_end_3:
  %9 = load %fib_i__2, 0
  ret %9
}
func main() -> i64 {

main_7:
  %x__6 = alloca 8
  %11 = set 12
  %10 = call %fibonacci__1, %11
  %x__6 = store %10, 0
  %13 = load %x__6, 0
  %12 = call %venice_printint, %13
  %14 = set 0
  ret %14
}

