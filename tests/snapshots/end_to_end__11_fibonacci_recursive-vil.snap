---
source: tests/end_to_end.rs
expression: vil_output
---
extern venice_printint;



// stack_frame_size = 8
// max_register_count = 7
func fibonacci__1(n: i64) -> i64 {

fibonacci__1_0:
  %rg0 = load %n__0, 0
  %rg1 = set 0
  cmp %rg0, %rg1
  jump_eq %if_true_1 %if_false_2

if_true_1:
  %rg2 = set 0
  ret %rg2
  jump %if_end_3

if_false_2:
  %rg0 = load %n__0, 0
  %rg1 = set 1
  cmp %rg0, %rg1
  jump_eq %if_true_4 %if_false_5

if_true_4:
  %rg2 = set 1
  ret %rg2
  jump %if_end_6

if_false_5:
  %rg3 = load %n__0, 0
  %rg4 = set 1
  %rg2 = sub %rg3, %rg4
  %rp0 = move %rg2
  %rg1 = call %fibonacci__1
  %rg5 = load %n__0, 0
  %rg6 = set 2
  %rg4 = sub %rg5, %rg6
  %rp0 = move %rg4
  %rg3 = call %fibonacci__1
  %rg0 = add %rg1, %rg3
  ret %rg0
  jump %if_end_6

if_end_6:
  jump %if_end_3

if_end_3:
}

// stack_frame_size = 8
// max_register_count = 2
func main() -> i64 {

main_7:
  %x__2 = alloca 8
  %rg1 = set 12
  %rp0 = move %rg1
  %rg0 = call %fibonacci__1
  %x__2 = store %rg0, 0
  %rg1 = load %x__2, 0
  %rp0 = move %rg1
  %rg0 = call %venice_printint
  %rg0 = set 0
  ret %rg0
}

