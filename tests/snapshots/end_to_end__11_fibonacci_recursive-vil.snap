---
source: tests/end_to_end.rs
expression: vil_output
---
extern venice_printint;



func fibonacci__0 {
  // stack_frame_size = 24

fibonacci__0_0:
  R0 = load -8  // n__1
  R1 = move R0
  R0 = set 0
  cmp R1, R0
  jump_eq if_true_2, if_false_3

if_true_2:
  R0 = set 0
  RRET = move R0
  jump fibonacci__0_return_1
  jump if_end_4

if_false_3:
  R0 = load -8  // n__1
  R1 = move R0
  R0 = set 1
  cmp R1, R0
  jump_eq if_true_5, if_false_6

if_true_5:
  R0 = set 1
  RRET = move R0
  jump fibonacci__0_return_1
  jump if_end_7

if_false_6:
  R0 = load -8  // n__1
  R1 = move R0
  R0 = set 1
  R1 = sub R1, R0
  store R1, -16
  R1 = call fibonacci__0, mem[-16]
  R2 = move R1
  R0 = load -8  // n__1
  R1 = move R0
  R0 = set 2
  R1 = sub R1, R0
  store R1, -24
  R1 = call fibonacci__0, mem[-24]
  R2 = add R2, R1
  RRET = move R2
  jump fibonacci__0_return_1
  jump if_end_7

if_end_7:
  jump if_end_4

if_end_4:

fibonacci__0_return_1:
}

func venice_main {
  // stack_frame_size = 24

venice_main_8:
  R0 = set 12
  store R0, -8
  R0 = call fibonacci__0, mem[-8]
  store R0, -16  // x__2
  R0 = load -16  // x__2
  store R0, -24
  R0 = call venice_printint, mem[-24]
  R0 = set 0
  RRET = move R0
  jump venice_main_return_9

venice_main_return_9:
}

