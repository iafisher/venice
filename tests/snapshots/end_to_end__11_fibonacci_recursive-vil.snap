---
source: tests/end_to_end.rs
expression: vil_output
---
extern venice_printint;



func fibonacci__0 {

fibonacci__0_0:
  frame_set_up 8
  callee_save R2
  callee_save R3
  callee_save R4
  callee_save R5
  callee_save R6
  store R7, -8  // n__1
  R0 = load -8  // n__1
  R1 = move R0
  R0 = set 0
  cmp R1, R0
  jump_eq %if_true_2 %if_false_3

if_true_2:
  R0 = set 0
  R13 = move R0
  jump %fibonacci__0_return_1
  jump %if_end_4

if_false_3:
  R0 = load -8  // n__1
  R1 = move R0
  R0 = set 1
  cmp R1, R0
  jump_eq %if_true_5 %if_false_6

if_true_5:
  R0 = set 1
  R13 = move R0
  jump %fibonacci__0_return_1
  jump %if_end_7

if_false_6:
  R0 = load -8  // n__1
  R1 = move R0
  R0 = set 1
  R1 = sub R1, R0
  R2 = move R1
  caller_save R0
  caller_save R1
  call %fibonacci__0, R2
  R1 = caller_restore
  R0 = caller_restore
  R2 = move R13
  R3 = move R2
  R0 = load -8  // n__1
  R1 = move R0
  R0 = set 2
  R1 = sub R1, R0
  R2 = move R1
  caller_save R0
  caller_save R1
  call %fibonacci__0, R2
  R1 = caller_restore
  R0 = caller_restore
  R2 = move R13
  R3 = add R3, R2
  R13 = move R3
  jump %fibonacci__0_return_1
  jump %if_end_7

if_end_7:
  jump %if_end_4

if_end_4:

fibonacci__0_return_1:
  R6 = callee_restore
  R5 = callee_restore
  R4 = callee_restore
  R3 = callee_restore
  R2 = callee_restore
  frame_tear_down 8
  ret
}

func venice_main {

venice_main_8:
  frame_set_up 8
  callee_save R2
  callee_save R3
  callee_save R4
  callee_save R5
  callee_save R6
  R0 = set 12
  R1 = move R0
  caller_save R0
  caller_save R1
  call %fibonacci__0, R1
  R1 = caller_restore
  R0 = caller_restore
  R1 = move R13
  store R1, -8  // x__2
  R0 = load -8  // x__2
  R1 = move R0
  caller_save R0
  caller_save R1
  call %venice_printint, R1
  R1 = caller_restore
  R0 = caller_restore
  R1 = move R13
  R0 = set 0
  R13 = move R0
  jump %venice_main_return_9

venice_main_return_9:
  R6 = callee_restore
  R5 = callee_restore
  R4 = callee_restore
  R3 = callee_restore
  R2 = callee_restore
  frame_tear_down 8
  ret
}

