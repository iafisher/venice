---
source: tests/end_to_end.rs
expression: vil_output
---
extern venice_printint;



// stack_frame_size = 8
// max_register_count = 7
func fibonacci__1(n: i64) -> i64 {

fibonacci__1_0:
  %0 = load %n__0, 0
  %1 = set 0
  cmp %0, %1
  jump_eq %if_true_1 %if_false_2

if_true_1:
  %2 = set 0
  ret %2
  jump %if_end_3

if_false_2:
  %0 = load %n__0, 0
  %1 = set 1
  cmp %0, %1
  jump_eq %if_true_4 %if_false_5

if_true_4:
  %2 = set 1
  ret %2
  jump %if_end_6

if_false_5:
  %3 = load %n__0, 0
  %4 = set 1
  %2 = sub %3, %4
  %1 = call %fibonacci__1, %2
  %5 = load %n__0, 0
  %6 = set 2
  %4 = sub %5, %6
  %3 = call %fibonacci__1, %4
  %0 = add %1, %3
  ret %0
  jump %if_end_6

if_end_6:
  jump %if_end_3

if_end_3:
}

// stack_frame_size = 8
// max_register_count = 2
func main() -> i64 {

main_7:
  %x__2 = alloca 8
  %1 = set 12
  %0 = call %fibonacci__1, %1
  %x__2 = store %0, 0
  %1 = load %x__2, 0
  %0 = call %venice_printint, %1
  %0 = set 0
  ret %0
}

