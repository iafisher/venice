---
source: tests/end_to_end.rs
expression: vil_output
---
extern venice_string_new;
extern venice_print;
extern venice_list_length;
extern venice_printint;
extern venice_list_length;
extern venice_string_new;
extern venice_print;
extern venice_list_index;
extern venice_println;



func venice_main {

venice_main_0:
  frame_set_up 16
  callee_save %rg2
  callee_save %rg3
  callee_save %rg4
  callee_save %rg5
  callee_save %rg6
  store %rp0, -8  // args__0
  %rg2 = set s_0
  %rp0 = move %rg2
  caller_save %rg0
  caller_save %rg1
  call %venice_string_new
  %rg1 = caller_restore
  %rg0 = caller_restore
  %rg1 = move %rt
  %rp0 = move %rg1
  caller_save %rg0
  caller_save %rg1
  call %venice_print
  %rg1 = caller_restore
  %rg0 = caller_restore
  %rg0 = move %rt
  %rg2 = load -8  // args__0
  %rp0 = move %rg2
  caller_save %rg0
  caller_save %rg1
  call %venice_list_length
  %rg1 = caller_restore
  %rg0 = caller_restore
  %rg1 = move %rt
  %rp0 = move %rg1
  caller_save %rg0
  caller_save %rg1
  call %venice_printint
  %rg1 = caller_restore
  %rg0 = caller_restore
  %rg0 = move %rt
  %rg0 = set 0
  store %rg0, -16  // i__1
  jump %while_cond_1

while_cond_1:
  %rg0 = load -16  // i__1
  %rg2 = load -8  // args__0
  %rp0 = move %rg2
  caller_save %rg0
  caller_save %rg1
  call %venice_list_length
  %rg1 = caller_restore
  %rg0 = caller_restore
  %rg1 = move %rt
  cmp %rg0, %rg1
  jump_lt %while_2 %while_end_3

while_2:
  %rg5 = set s_1
  %rp0 = move %rg5
  caller_save %rg0
  caller_save %rg1
  call %venice_string_new
  %rg1 = caller_restore
  %rg0 = caller_restore
  %rg4 = move %rt
  %rp0 = move %rg4
  caller_save %rg0
  caller_save %rg1
  call %venice_print
  %rg1 = caller_restore
  %rg0 = caller_restore
  %rg3 = move %rt
  %rg2 = load -8  // args__0
  %rp0 = move %rg2
  %rg3 = load -16  // i__1
  %rp1 = move %rg3
  caller_save %rg0
  caller_save %rg1
  call %venice_list_index
  %rg1 = caller_restore
  %rg0 = caller_restore
  %rg1 = move %rt
  %rp0 = move %rg1
  caller_save %rg0
  caller_save %rg1
  call %venice_println
  %rg1 = caller_restore
  %rg0 = caller_restore
  %rg0 = move %rt
  %rg1 = load -16  // i__1
  %rg2 = set 1
  %rg0 = add %rg1, %rg2
  store %rg0, -16  // i__1
  jump %while_cond_1

while_end_3:
  %rg0 = set 0
  %rt = move %rg0
  %rg6 = callee_restore
  %rg5 = callee_restore
  %rg4 = callee_restore
  %rg3 = callee_restore
  %rg2 = callee_restore
  frame_tear_down 16
  ret
}


data s_0 = "# of args: ";
data s_1 = "Arg: ";

