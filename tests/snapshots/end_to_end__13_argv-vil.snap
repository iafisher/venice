---
source: tests/end_to_end.rs
expression: vil_output
---
extern venice_string_new;
extern venice_print;
extern venice_list_length;
extern venice_printint;
extern venice_list_length;
extern venice_string_new;
extern venice_print;
extern venice_list_index;
extern venice_println;



func venice_main {

venice_main_0:
  frame_set_up 16
  callee_save R8
  callee_save R9
  callee_save R10
  callee_save R11
  callee_save R12
  store R0, -8  // args__0
  R6 = set s_0
  R7 = move R6
  caller_save R6
  caller_save R7
  R0 = move R7
  call %venice_string_new
  R7 = caller_restore
  R6 = caller_restore
  R7 = move R13
  R8 = move R7
  caller_save R6
  caller_save R7
  R0 = move R8
  call %venice_print
  R7 = caller_restore
  R6 = caller_restore
  R8 = move R13
  R6 = load -8  // args__0
  R7 = move R6
  caller_save R6
  caller_save R7
  R0 = move R7
  call %venice_list_length
  R7 = caller_restore
  R6 = caller_restore
  R7 = move R13
  R8 = move R7
  caller_save R6
  caller_save R7
  R0 = move R8
  call %venice_printint
  R7 = caller_restore
  R6 = caller_restore
  R8 = move R13
  R6 = set 0
  store R6, -16  // i__1
  jump %while_cond_1

while_cond_1:
  R6 = load -8  // args__0
  R7 = move R6
  caller_save R6
  caller_save R7
  R0 = move R7
  call %venice_list_length
  R7 = caller_restore
  R6 = caller_restore
  R7 = move R13
  R6 = load -16  // i__1
  cmp R6, R7
  jump_lt %while_2 %while_end_3

while_2:
  R6 = set s_1
  R7 = move R6
  caller_save R6
  caller_save R7
  R0 = move R7
  call %venice_string_new
  R7 = caller_restore
  R6 = caller_restore
  R7 = move R13
  R8 = move R7
  caller_save R6
  caller_save R7
  R0 = move R8
  call %venice_print
  R7 = caller_restore
  R6 = caller_restore
  R8 = move R13
  R6 = load -8  // args__0
  R8 = move R6
  R6 = load -16  // i__1
  R7 = move R6
  caller_save R6
  caller_save R7
  R0 = move R8
  R1 = move R7
  call %venice_list_index
  R7 = caller_restore
  R6 = caller_restore
  R8 = move R13
  R9 = move R8
  caller_save R6
  caller_save R7
  R0 = move R9
  call %venice_println
  R7 = caller_restore
  R6 = caller_restore
  R9 = move R13
  R6 = load -16  // i__1
  R7 = move R6
  R6 = set 1
  R7 = add R7, R6
  store R7, -16  // i__1
  jump %while_cond_1

while_end_3:
  R6 = set 0
  R13 = move R6
  R12 = callee_restore
  R11 = callee_restore
  R10 = callee_restore
  R9 = callee_restore
  R8 = callee_restore
  frame_tear_down 16
  ret
}


data s_0 = "# of args: ";
data s_1 = "Arg: ";

