---
source: tests/end_to_end.rs
expression: vil_output
---
extern venice_string_new;
extern venice_print;
extern venice_list_length;
extern venice_printint;
extern venice_list_length;
extern venice_string_new;
extern venice_print;
extern venice_list_index;
extern venice_println;



func venice_main {

venice_main_0:
  frame_set_up 16
  callee_save R2
  callee_save R3
  callee_save R4
  callee_save R5
  callee_save R6
  store R7, -8  // args__0
  R0 = set s_0
  R1 = move R0
  caller_save R0
  caller_save R1
  call %venice_string_new, R1
  R1 = caller_restore
  R0 = caller_restore
  R1 = move R13
  R2 = move R1
  caller_save R0
  caller_save R1
  call %venice_print, R2
  R1 = caller_restore
  R0 = caller_restore
  R2 = move R13
  R0 = load -8  // args__0
  R1 = move R0
  caller_save R0
  caller_save R1
  call %venice_list_length, R1
  R1 = caller_restore
  R0 = caller_restore
  R1 = move R13
  R2 = move R1
  caller_save R0
  caller_save R1
  call %venice_printint, R2
  R1 = caller_restore
  R0 = caller_restore
  R2 = move R13
  R0 = set 0
  store R0, -16  // i__1
  jump %while_cond_2

while_cond_2:
  R0 = load -8  // args__0
  R1 = move R0
  caller_save R0
  caller_save R1
  call %venice_list_length, R1
  R1 = caller_restore
  R0 = caller_restore
  R1 = move R13
  R0 = load -16  // i__1
  cmp R0, R1
  jump_lt %while_3 %while_end_4

while_3:
  R0 = set s_1
  R1 = move R0
  caller_save R0
  caller_save R1
  call %venice_string_new, R1
  R1 = caller_restore
  R0 = caller_restore
  R1 = move R13
  R2 = move R1
  caller_save R0
  caller_save R1
  call %venice_print, R2
  R1 = caller_restore
  R0 = caller_restore
  R2 = move R13
  R0 = load -8  // args__0
  R2 = move R0
  R0 = load -16  // i__1
  R1 = move R0
  caller_save R0
  caller_save R1
  call %venice_list_index, R2, R1
  R1 = caller_restore
  R0 = caller_restore
  R2 = move R13
  R3 = move R2
  caller_save R0
  caller_save R1
  call %venice_println, R3
  R1 = caller_restore
  R0 = caller_restore
  R3 = move R13
  R0 = load -16  // i__1
  R1 = move R0
  R0 = set 1
  R1 = add R1, R0
  store R1, -16  // i__1
  jump %while_cond_2

while_end_4:
  R0 = set 0
  R13 = move R0
  jump %venice_main_return_1

venice_main_return_1:
  R6 = callee_restore
  R5 = callee_restore
  R4 = callee_restore
  R3 = callee_restore
  R2 = callee_restore
  frame_tear_down 16
  ret
}


data s_0 = "# of args: ";
data s_1 = "Arg: ";

