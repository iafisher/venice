---
source: tests/end_to_end.rs
expression: x86_output
---
fibonacci__0:
  pushq %rbp
  movq %rsp, %rbp
  subq $24, %rsp
  pushq %r12
  pushq %r13
  pushq %r14
  pushq %r15
  pushq %rbx
  movq %rdi, -8(%rbp)

fibonacci__0_0:
  movq -8(%rbp), %r10
  movq %r10, %r11
  movq $0, %r10
  cmpq %r10, %r11
  je if_true_2
  jmp if_false_3

if_true_2:
  movq $0, %r10
  movq %r10, %rax
  jmp fibonacci__0_return_1
  jmp if_end_4

if_false_3:
  movq -8(%rbp), %r10
  movq %r10, %r11
  movq $1, %r10
  cmpq %r10, %r11
  je if_true_5
  jmp if_false_6

if_true_5:
  movq $1, %r10
  movq %r10, %rax
  jmp fibonacci__0_return_1
  jmp if_end_7

if_false_6:
  movq -8(%rbp), %r10
  movq %r10, %r11
  movq $1, %r10
  subq %r10, %r11
  movq %r11, %r11
  movq %r11, -16(%rbp)
  pushq %r10
  pushq %r11
  movq -16(%rbp), %rdi
  call fibonacci__0
  popq %r11
  popq %r10
  movq %rax, %r11
  movq %r11, %r12
  movq -8(%rbp), %r10
  movq %r10, %r11
  movq $2, %r10
  subq %r10, %r11
  movq %r11, %r11
  movq %r11, -24(%rbp)
  pushq %r10
  pushq %r11
  movq -24(%rbp), %rdi
  call fibonacci__0
  popq %r11
  popq %r10
  movq %rax, %r11
  addq %r11, %r12
  movq %r12, %r12
  movq %r12, %rax
  jmp fibonacci__0_return_1
  jmp if_end_7

if_end_7:
  jmp if_end_4

if_end_4:

fibonacci__0_return_1:
  popq %rbx
  popq %r15
  popq %r14
  popq %r13
  popq %r12
  addq $24, %rsp
  popq %rbp
  retq

.globl venice_main
venice_main:
  pushq %rbp
  movq %rsp, %rbp
  subq $24, %rsp
  pushq %r12
  pushq %r13
  pushq %r14
  pushq %r15
  pushq %rbx

venice_main_8:
  movq $12, %r10
  movq %r10, -8(%rbp)
  pushq %r10
  pushq %r11
  movq -8(%rbp), %rdi
  call fibonacci__0
  popq %r11
  popq %r10
  movq %rax, %r10
  movq %r10, -16(%rbp)
  movq -16(%rbp), %r10
  movq %r10, -24(%rbp)
  pushq %r10
  pushq %r11
  movq -24(%rbp), %rdi
  call venice_printint
  popq %r11
  popq %r10
  movq %rax, %r10
  movq $0, %r10
  movq %r10, %rax
  jmp venice_main_return_9

venice_main_return_9:
  popq %rbx
  popq %r15
  popq %r14
  popq %r13
  popq %r12
  addq $24, %rsp
  popq %rbp
  retq


