---
source: tests/end_to_end.rs
expression: x86_output
---
fibonacci__0:

fibonacci__0_0:
  pushq %rbp
  movq %rsp, %rbp
  subq $8, %rsp
  pushq %r12
  pushq %r13
  pushq %r14
  pushq %r15
  pushq %rbx
  movq %rdi, -8(%rbp)
  movq -8(%rbp), %r10
  movq $0, %r11
  cmpq %r11, %r10
  je if_true_1
  jmp if_false_2

if_true_1:
  movq $0, %r10
  movq %r10, %rax
  popq %rbx
  popq %r15
  popq %r14
  popq %r13
  popq %r12
  addq $8, %rsp
  popq %rbp
  retq
  jmp if_end_3

if_false_2:
  movq -8(%rbp), %r10
  movq $1, %r11
  cmpq %r11, %r10
  je if_true_4
  jmp if_false_5

if_true_4:
  movq $1, %r10
  movq %r10, %rax
  popq %rbx
  popq %r15
  popq %r14
  popq %r13
  popq %r12
  addq $8, %rsp
  popq %rbp
  retq
  jmp if_end_6

if_false_5:
  movq -8(%rbp), %r10
  movq $1, %r11
  subq %r11, %r10
  movq %r10, %r11
  movq %r11, %rdi
  pushq %r10
  pushq %r11
  call fibonacci__0
  popq %r11
  popq %r10
  movq %rax, %r10
  movq -8(%rbp), %r11
  movq $2, %r12
  subq %r12, %r11
  movq %r11, %r12
  movq %r12, %rdi
  pushq %r10
  pushq %r11
  call fibonacci__0
  popq %r11
  popq %r10
  movq %rax, %r11
  addq %r11, %r10
  movq %r10, %r11
  movq %r11, %rax
  popq %rbx
  popq %r15
  popq %r14
  popq %r13
  popq %r12
  addq $8, %rsp
  popq %rbp
  retq
  jmp if_end_6

if_end_6:
  jmp if_end_3

if_end_3:

.globl venice_main
venice_main:

venice_main_7:
  pushq %rbp
  movq %rsp, %rbp
  subq $8, %rsp
  pushq %r12
  pushq %r13
  pushq %r14
  pushq %r15
  pushq %rbx
  movq $12, %r10
  movq %r10, %rdi
  pushq %r10
  pushq %r11
  call fibonacci__0
  popq %r11
  popq %r10
  movq %rax, %r10
  movq %r10, -8(%rbp)
  movq -8(%rbp), %r10
  movq %r10, %rdi
  pushq %r10
  pushq %r11
  call venice_printint
  popq %r11
  popq %r10
  movq %rax, %r10
  movq $0, %r10
  movq %r10, %rax
  popq %rbx
  popq %r15
  popq %r14
  popq %r13
  popq %r12
  addq $8, %rsp
  popq %rbp
  retq


