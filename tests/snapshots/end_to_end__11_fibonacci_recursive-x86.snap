---
source: tests/end_to_end.rs
expression: x86_output
---
extern venice_printint


section .text

fibonacci__0:

fibonacci__0_0:
  push r12
  push r13
  push r14
  push r15
  push rbx
  push rbp
  mov rbp, rsp
  sub rsp, 8
  mov [rbp-8], rdi
  mov r10, [rbp-8]
  mov r11, 0
  cmp r10, r11
  je if_true_1
  jmp if_false_2

if_true_1:
  mov r12, 0
  mov rax, r12
  add rsp, 8
  pop rbp
  pop rbx
  pop r15
  pop r14
  pop r13
  pop r12
  ret
  jmp if_end_3

if_false_2:
  mov r10, [rbp-8]
  mov r11, 1
  cmp r10, r11
  je if_true_4
  jmp if_false_5

if_true_4:
  mov r12, 1
  mov rax, r12
  add rsp, 8
  pop rbp
  pop rbx
  pop r15
  pop r14
  pop r13
  pop r12
  ret
  jmp if_end_6

if_false_5:
  mov r13, [rbp-8]
  mov r14, 1
  mov r12, r13
  sub r12, r14
  mov rdi, r12
  push r10
  push r11
  call fibonacci__0
  pop r11
  pop r10
  mov r11, rax
  mov r15, [rbp-8]
  mov rbx, 2
  mov r14, r15
  sub r14, rbx
  mov rdi, r14
  push r10
  push r11
  call fibonacci__0
  pop r11
  pop r10
  mov r13, rax
  mov r10, r13
  add r10, r11
  mov rax, r10
  add rsp, 8
  pop rbp
  pop rbx
  pop r15
  pop r14
  pop r13
  pop r12
  ret
  jmp if_end_6

if_end_6:
  jmp if_end_3

if_end_3:

global main
main:

main_7:
  push r12
  push r13
  push r14
  push r15
  push rbx
  push rbp
  mov rbp, rsp
  sub rsp, 8
  mov r11, 12
  mov rdi, r11
  push r10
  push r11
  call fibonacci__0
  pop r11
  pop r10
  mov r10, rax
  mov [rbp-8], r10
  mov r11, [rbp-8]
  mov rdi, r11
  push r10
  push r11
  call venice_printint
  pop r11
  pop r10
  mov r10, rax
  mov r10, 0
  mov rax, r10
  add rsp, 8
  pop rbp
  pop rbx
  pop r15
  pop r14
  pop r13
  pop r12
  ret

section .data


