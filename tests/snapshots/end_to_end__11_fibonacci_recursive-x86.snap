---
source: tests/end_to_end.rs
expression: x86_output
---
extern venice_printint


section .text

fibonacci__1:
  push rbx
  push rcx
  push rdx
  push rsi
  push rdi
  push r8
  push rbp
  mov rbp, rsp
  sub rsp, 8
  mov [rbp-8], rdi

fibonacci__1_0:
  mov rax, [rbp-8]
  mov rbx, 0
  cmp rax, rbx
  je if_true_1
  jmp if_false_2

if_true_1:
  mov rcx, 0
  mov rax, rcx
  add rsp, 8
  pop rbp
  pop r8
  pop rdi
  pop rsi
  pop rdx
  pop rcx
  pop rbx
  ret
  jmp if_end_3

if_false_2:
  mov rax, [rbp-8]
  mov rbx, 1
  cmp rax, rbx
  je if_true_4
  jmp if_false_5

if_true_4:
  mov rcx, 1
  mov rax, rcx
  add rsp, 8
  pop rbp
  pop r8
  pop rdi
  pop rsi
  pop rdx
  pop rcx
  pop rbx
  ret
  jmp if_end_6

if_false_5:
  mov rdx, [rbp-8]
  mov rsi, 1
  mov rcx, rdx
  sub rcx, rsi
  mov rdi, rcx
  call fibonacci__1
  mov rbx, rax
  mov rdi, [rbp-8]
  mov r8, 2
  mov rsi, rdi
  sub rsi, r8
  mov rdi, rsi
  call fibonacci__1
  mov rdx, rax
  mov rax, rdx
  add rax, rbx
  mov rax, rax
  add rsp, 8
  pop rbp
  pop r8
  pop rdi
  pop rsi
  pop rdx
  pop rcx
  pop rbx
  ret
  jmp if_end_6

if_end_6:
  jmp if_end_3

if_end_3:

global main
main:
  push rbx
  push rbp
  mov rbp, rsp
  sub rsp, 8

main_7:
  mov rbx, 12
  mov rdi, rbx
  call fibonacci__1
  mov rax, rax
  mov [rbp-8], rax
  mov rbx, [rbp-8]
  mov rdi, rbx
  call venice_printint
  mov rax, rax
  mov rax, 0
  mov rax, rax
  add rsp, 8
  pop rbp
  pop rbx
  ret

section .data


