---
source: tests/end_to_end.rs
expression: x86_output
---
add__0:
  pushq %rbp
  movq %rsp, %rbp
  subq $16, %rsp
  pushq %r12
  pushq %r13
  pushq %r14
  pushq %r15
  pushq %rbx
  movq %rdi, -8(%rbp)
  movq %rsi, -16(%rbp)

add__0_0:
  movq -8(%rbp), %r10
  movq %r10, %r11
  movq -16(%rbp), %r10
  addq %r10, %r11
  movq %r11, %r11
  movq %r11, %rax
  jmp add__0_return_1

add__0_return_1:
  popq %rbx
  popq %r15
  popq %r14
  popq %r13
  popq %r12
  addq $16, %rsp
  popq %rbp
  retq

.globl venice_main
venice_main:
  pushq %rbp
  movq %rsp, %rbp
  subq $56, %rsp
  pushq %r12
  pushq %r13
  pushq %r14
  pushq %r15
  pushq %rbx

venice_main_2:
  movq $.s_0, %r10
  movq %r10, -8(%rbp)
  pushq %r10
  pushq %r11
  movq -8(%rbp), %rdi
  call venice_string_new
  popq %r11
  popq %r10
  movq %rax, %r10
  movq %r10, -16(%rbp)
  pushq %r10
  pushq %r11
  movq -16(%rbp), %rdi
  call venice_print
  popq %r11
  popq %r10
  movq %rax, %r10
  movq $20, %r10
  movq %r10, -24(%rbp)
  movq $5, %r10
  movq %r10, -32(%rbp)
  movq $17, %r10
  movq %r10, -40(%rbp)
  pushq %r10
  pushq %r11
  movq -32(%rbp), %rdi
  movq -40(%rbp), %rsi
  call add__0
  popq %r11
  popq %r10
  movq %rax, %r10
  movq %r10, -48(%rbp)
  pushq %r10
  pushq %r11
  movq -24(%rbp), %rdi
  movq -48(%rbp), %rsi
  call add__0
  popq %r11
  popq %r10
  movq %rax, %r10
  movq %r10, -56(%rbp)
  pushq %r10
  pushq %r11
  movq -56(%rbp), %rdi
  call venice_printint
  popq %r11
  popq %r10
  movq %rax, %r10
  movq $0, %r10
  movq %r10, %rax
  jmp venice_main_return_3

venice_main_return_3:
  popq %rbx
  popq %r15
  popq %r14
  popq %r13
  popq %r12
  addq $56, %rsp
  popq %rbp
  retq

.s_0:
  .string "Should be 42: "

