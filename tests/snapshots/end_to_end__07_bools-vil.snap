---
source: tests/end_to_end.rs
expression: vil_output
---
extern venice_string_new;
extern venice_println;
extern venice_string_new;
extern venice_println;



func venice_main {
  // stack_frame_size = 56

venice_main_0:
  R0 = set 1
  store R0, -8  // x__0
  R0 = set 0
  store R0, -16  // y__1
  R0 = load -8  // x__0
  RS1 = set 1
  cmp R0, RS1
  jump_eq if_true_5, if_false_6

if_true_5:
  R0 = load -16  // y__1
  R1 = move R0
  jump if_end_7

if_false_6:
  R0 = set 0
  R1 = move R0
  jump if_end_7

if_end_7:
  RS1 = set 1
  cmp R1, RS1
  jump_eq if_true_2, if_false_3

if_true_2:
  R0 = set 1
  R1 = move R0
  jump if_end_4

if_false_3:
  R0 = load -16  // y__1
  R0 = logical_not R0
  R1 = move R0
  jump if_end_4

if_end_4:
  store R1, -24  // z__2
  R0 = load -24  // z__2
  RS1 = set 1
  cmp R0, RS1
  jump_eq if_true_8, if_false_9

if_true_8:
  R0 = set s_0
  store R0, -32
  R0 = call venice_string_new, mem[-32]
  store R0, -40
  R0 = call venice_println, mem[-40]
  jump if_end_10

if_false_9:
  R0 = set s_1
  store R0, -48
  R0 = call venice_string_new, mem[-48]
  store R0, -56
  R0 = call venice_println, mem[-56]
  jump if_end_10

if_end_10:
  R0 = set 0
  RRET = move R0
  jump venice_main_return_1

venice_main_return_1:
}


data s_0 = "pass";
data s_1 = "fail";

