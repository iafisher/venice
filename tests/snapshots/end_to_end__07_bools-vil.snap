---
source: tests/end_to_end.rs
expression: vil_output
---
extern venice_string_new;
extern venice_println;
extern venice_string_new;
extern venice_println;



func venice_main {

venice_main_0:
  frame_set_up 24
  callee_save R2
  callee_save R3
  callee_save R4
  callee_save R5
  callee_save R6
  R0 = set 1
  store R0, -8  // x__0
  R0 = set 0
  store R0, -16  // y__1
  R0 = load -8  // x__0
  R13 = set 1
  cmp R0, R13
  jump_eq %if_true_5 %if_false_6

if_true_5:
  R0 = load -16  // y__1
  R1 = move R0
  jump %if_end_7

if_false_6:
  R0 = set 0
  R1 = move R0
  jump %if_end_7

if_end_7:
  R13 = set 1
  cmp R1, R13
  jump_eq %if_true_2 %if_false_3

if_true_2:
  R0 = set 1
  R1 = move R0
  jump %if_end_4

if_false_3:
  R0 = load -16  // y__1
  R0 = logical_not R0
  R1 = move R0
  jump %if_end_4

if_end_4:
  store R1, -24  // z__2
  R0 = load -24  // z__2
  R13 = set 1
  cmp R0, R13
  jump_eq %if_true_8 %if_false_9

if_true_8:
  R0 = set s_0
  R1 = move R0
  caller_save R0
  caller_save R1
  call %venice_string_new, R1
  R1 = caller_restore
  R0 = caller_restore
  R1 = move R13
  R2 = move R1
  caller_save R0
  caller_save R1
  call %venice_println, R2
  R1 = caller_restore
  R0 = caller_restore
  R2 = move R13
  jump %if_end_10

if_false_9:
  R0 = set s_1
  R1 = move R0
  caller_save R0
  caller_save R1
  call %venice_string_new, R1
  R1 = caller_restore
  R0 = caller_restore
  R1 = move R13
  R2 = move R1
  caller_save R0
  caller_save R1
  call %venice_println, R2
  R1 = caller_restore
  R0 = caller_restore
  R2 = move R13
  jump %if_end_10

if_end_10:
  R0 = set 0
  R13 = move R0
  jump %venice_main_return_1

venice_main_return_1:
  R6 = callee_restore
  R5 = callee_restore
  R4 = callee_restore
  R3 = callee_restore
  R2 = callee_restore
  frame_tear_down 24
  ret
}


data s_0 = "pass";
data s_1 = "fail";

