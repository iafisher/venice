# OUTPUT
# Date { 2021, 2, 28 }
# Date { 2020, 2, 29 }
# Date { 2000, 1, 14 }
# END OUTPUT
class Date {
  public year: int
  public month: int
  public day: int
}

class Month {
  public year: int
  public month: int
}


func date_as_month(d: Date) -> Month {
  return new Month { year: d.year, month: d.month }
}

func is_leap_year(year: int) -> bool {
  return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)
}

func days_in_month(m: Month) -> int {
  if is_leap_year(m.year) and m.month == 2 {
    return 29
  } else {
    return [-1, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][m.month]
  }
}

func next_month(d: Date) -> Date {
  let year = d.year if d.month < 12 else d.year + 1
  let month = d.month + 1 if d.month < 12 else 1
  let n = days_in_month(new Month { year: year, month: month })
  let day = minimum(d.day, n)
  return new Date { year: year, month: month, day: day }
}

func main() {
  let d = new Date { year: 2021, month: 1, day: 29 }
  print(next_month(d))

  let d2 = new Date { year: 2020, month: 1, day: 29 }
  print(next_month(d2))

  let d3 = new Date { year: 1999, month: 12, day: 14 }
  print(next_month(d3))
}
