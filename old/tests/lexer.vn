# OUTPUT
# [Token { Integer, "1" }, Token { Plus, "+" }, Token { Integer, "2" }, Token { Equals, "=" }, Token { Integer, "3" }]
# END OUTPUT
enum TokenType { Equals, Integer, Plus, Unknown }

class Token {
  public type: TokenType
  public value: string
}

func lex(program: string) -> [Token] {
  let single_char_tokens = {"+": TokenType::Plus, "=": TokenType::Equals}

  let r: [Token] = []
  var index = 0
  while index < program.size() {
    let c = program[index]
    if c.is_digit() {
      let start = index
      while index < program.size() {
        let c2 = program[index]
        if not c2.is_digit() {
          break
        }
        index += 1
      }

      r.append(new Token { type: TokenType::Integer, value: program.slice(start, index) })
    } else if c.is_whitespace() {
      index += 1
    } else {
      match single_char_tokens[c] {
        case Some(type) {
          r.append(new Token { type: type, value: c })
        }
        case None {
          r.append(new Token { type: TokenType::Unknown, value: c })
        }
      }
      index += 1
    }
  }
  return r
}

func main() {
  let program = "1 + 2 = 3"
  print(lex(program))
}
